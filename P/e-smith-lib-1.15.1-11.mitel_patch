Index: e-smith-lib/e-smith-lib.spec
diff -u e-smith-lib/root/usr/lib/perl5/site_perl/esmith/ethernet.pm:1.8 e-smith-lib/root/usr/lib/perl5/site_perl/esmith/ethernet.pm:1.10
--- e-smith-lib/root/usr/lib/perl5/site_perl/esmith/ethernet.pm:1.8	Tue Sep  2 17:05:26 2003
+++ e-smith-lib/root/usr/lib/perl5/site_perl/esmith/ethernet.pm	Wed Oct 13 13:14:13 2004
@@ -37,45 +37,47 @@
 
 BEGIN
 {
+
     # All the routines below need the arrays, so populate them on entry.
 
     my $proc_version = "/proc/version";
 
-    open(VERSION, "$proc_version")
-        or warn "Could not open $proc_version for reading. $!\n";
+    open( VERSION, "$proc_version" )
+      or warn "Could not open $proc_version for reading. $!\n";
 
-    my $kernel = (split(' ', <VERSION>))[2];
+    my $kernel = ( split( ' ', <VERSION> ) )[2];
     close VERSION;
 
     my @modules_path = (
-            "/lib/modules/" . $kernel . "/net",
-            "/lib/modules/" . $kernel . "/kernel/drivers/net",
-            "/lib/modules/" . $kernel . "/kernel/drivers/net/tulip",
-            "/lib/modules/" . $kernel . "/kernel/drivers/net/sk98lin",
-            "/lib/modules/" . $kernel . "/kernel/drivers/net/skfp",
-            "/lib/modules/" . $kernel . "/kernel/drivers/net/tokenring",
-            "/lib/modules/" . $kernel . "/kernel/drivers/addon/e100",
-            "/lib/modules/" . $kernel . "/kernel/drivers/addon/e1000"
+        "/lib/modules/" . $kernel . "/kernel/drivers/net",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/bonding",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/e100",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/skfp",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/e1000",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/pcmcia",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/tokenring",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/tulip",
+        "/lib/modules/" . $kernel . "/kernel/drivers/net/wireless",
     );
 
     my %network_drivers;
     foreach my $modules (@modules_path)
     {
-        if (-d $modules)
+        if ( -d $modules )
         {
-            unless (opendir MODULES, $modules)
+            unless ( opendir MODULES, $modules )
             {
-               warn "Could not open network modules directory $modules: $!\n";
-               return;
+                warn "Could not open network modules directory $modules: $!\n";
+                return;
             }
 
-            foreach (readdir MODULES)
+            foreach ( readdir MODULES )
             {
-               next if /^\.\.?$/;              # Ignore "." and ".."
-               next if -d;                     # Ignore directories
+                next if /^\.\.?$/;    # Ignore "." and ".."
+                next if -d;           # Ignore directories
 
-               s/\.o$//;
-               ++$network_drivers{$_};
+                s/\.o$//;
+                ++$network_drivers{$_};
             }
 
             closedir MODULES;
@@ -84,53 +86,53 @@
 
     my $pcitable = "/usr/share/hwdata/pcitable";
 
-    unless (open(PCITABLE, $pcitable) ||
-	    open(PCITABLE, $pcitable = "/usr/share/kudzu/pcitable") )
+    unless ( open( PCITABLE, $pcitable )
+        || open( PCITABLE, $pcitable = "/usr/share/kudzu/pcitable" ) )
     {
-	warn "Could not open pci table $pcitable: $!\n";
-	return;
+        warn "Could not open pci table $pcitable: $!\n";
+        return;
     }
 
     my %descriptions;
 
     while (<PCITABLE>)
     {
-	next if (/^\s*#|^\s*$/);
+        next if (/^\s*#|^\s*$/);
+
+        chomp;
+        my @f = split(/\t/);
+
+        next if ( $f[2] =~ /^0x/ );    # Can't handle sub vendor IDs yet.
 
-	chomp;
-	my @f = split(/\t/);
+        $f[0] =~ s/^0x//;
+        $f[1] =~ s/^0x//;
+        $f[2] =~ s/"//g;
+        $f[3] =~ s/"//g;
 
-	next if ($f[2] =~ /^0x/);	# Can't handle sub vendor IDs yet.
+        if ( exists $network_drivers{ $f[2] } )
+        {
+            my $card = $f[0] . ":" . $f[1];
+            $private_pci_network_cards{$card}{driver}      = $f[2];
+            $private_pci_network_cards{$card}{description} = $f[3];
 
-	$f[0] =~ s/^0x//;
-	$f[1] =~ s/^0x//;
-	$f[2] =~ s/"//g;
-	$f[3] =~ s/"//g;
-
-	if (exists $network_drivers{$f[2]})
-	{
-	    my $card = $f[0] . ":" . $f[1];
-	    $private_pci_network_cards{$card}{driver} = $f[2];
-	    $private_pci_network_cards{$card}{description} = $f[3];
-
-	    my $description = $f[3];
-	    $description =~ s/\|.*//;
-
-	    if (exists $private_pci_network_drivers{$f[2]})
-	    {
-		unless (exists $descriptions{$f[2] . $description})
-		{
-		    $private_pci_network_drivers{$f[2]} .= " or $description";
-		    ++$descriptions{$f[2] . $description};
-		}
-	    }
-	    else
-	    {
-		$private_pci_network_drivers{$f[2]} = $description;
-		++$descriptions{$f[2] . $description};
-	    }
+            my $description = $f[3];
+            $description =~ s/\|.*//;
 
-	}
+            if ( exists $private_pci_network_drivers{ $f[2] } )
+            {
+                unless ( exists $descriptions{ $f[2] . $description } )
+                {
+                    $private_pci_network_drivers{ $f[2] } .= " or $description";
+                    ++$descriptions{ $f[2] . $description };
+                }
+            }
+            else
+            {
+                $private_pci_network_drivers{ $f[2] } = $description;
+                ++$descriptions{ $f[2] . $description };
+            }
+
+        }
     }
 
     close PCITABLE;
@@ -150,16 +152,14 @@
     my $drivers = '';
 
     return "\"unknown driver\"\t\"unknown description\" "
-	unless (scalar keys %private_pci_network_drivers);
+      unless ( scalar keys %private_pci_network_drivers );
 
-    foreach $driver (sort keys %private_pci_network_drivers)
+    foreach $driver ( sort keys %private_pci_network_drivers )
     {
-	$drivers .=
-	    "\""
-	    . $driver
-	    . "\"\t\""
-	    . $private_pci_network_drivers{$driver}
-	    . " based adapter\" ";
+        $drivers .=
+            "\"" . $driver . "\"\t\""
+          . $private_pci_network_drivers{$driver}
+          . " based adapter\" ";
     }
 
     return $drivers;
@@ -178,16 +178,14 @@
     my $cards = '';
 
     return "\"unknown driver\"\t\"unknown adapter card\" "
-	unless (scalar keys %private_pci_network_cards);
+      unless ( scalar keys %private_pci_network_cards );
 
-    foreach (sort private_card_by_driver keys %private_pci_network_cards)
+    foreach ( sort private_card_by_driver keys %private_pci_network_cards )
     {
-	$cards .=
-	    "\""
-	    . $private_pci_network_cards{$_}{driver}
-	    . "\"\t\""
-	    . $private_pci_network_cards{$_}{description}
-	    . "\" ";
+        $cards .= "\""
+          . $private_pci_network_cards{$_}{driver}
+          . "\"\t\""
+          . $private_pci_network_cards{$_}{description} . "\" ";
     }
 
     return $cards;
@@ -206,18 +204,15 @@
     my $adapter = shift;
 
     return "unknown"
-	unless (
-		    scalar keys %private_pci_network_cards
-		    &&
-		    $adapter
-	    );
+      unless ( scalar keys %private_pci_network_cards
+        && $adapter );
 
-    foreach (sort keys %private_pci_network_cards)
+    foreach ( sort keys %private_pci_network_cards )
     {
-	if ($private_pci_network_cards{$_}{description} eq $adapter)
-	{
-	    return $private_pci_network_cards{$_}{driver};
-	}
+        if ( $private_pci_network_cards{$_}{description} eq $adapter )
+        {
+            return $private_pci_network_cards{$_}{driver};
+        }
     }
 
     return "unknown";
@@ -234,54 +229,49 @@
 sub probeAdapters ()
 {
 
-    return unless (scalar keys %private_pci_network_cards);
+    return unless ( scalar keys %private_pci_network_cards );
 
-    my $lspci = "/sbin/lspci -n";
+    my $lspci     = "/sbin/lspci -n";
     my $max_cards = 2;
-    my $adapters = '';
+    my $adapters  = '';
 
-    unless (open(LSPCI, "$lspci | "))
+    unless ( open( LSPCI, "$lspci | " ) )
     {
-	warn "Could not run $lspci: $!\n";
-	return;
+        warn "Could not run $lspci: $!\n";
+        return;
     }
 
     my $index = 1;
 
     while (<LSPCI>)
     {
-	last if ($index > $max_cards);
+        last if ( $index > $max_cards );
+
+        chomp;
+
+        my @f = split(' ');
 
-	chomp;
+        my $card = $f[3];
+        my $driver;
+        my $description;
 
-	my @f = split(' ');
+        if ( exists $private_pci_network_cards{$card} )
+        {
+            $driver      = $private_pci_network_cards{$card}{driver};
+            $description = $private_pci_network_cards{$card}{description};
+        }
+        else
+        {
+            next unless /Class 0200:/;
+            $driver      = "unknown";
+            $description = "unknown";
+        }
 
-	my $card = $f[3];
-	my $driver;
-	my $description;
-
-	if (exists $private_pci_network_cards{$card})
-	{
-	    $driver = $private_pci_network_cards{$card}{driver};
-	    $description = $private_pci_network_cards{$card}{description};
-	}
-	else
-	{
-	    next unless /Class 0200:/;
-	    $driver = "unknown";
-	    $description = "unknown";
-	}
-
-	$adapters .=
-	    "EthernetDriver"
-	    . $index
-	    . "\t"
-	    . $driver
-	    . "\t"
-	    . $description
-	    . "\n";
+        $adapters .=
+          "EthernetDriver" . $index . "\t" . $driver . "\t"
+          . $description . "\n";
 
-	++$index;
+        ++$index;
     }
 
     close LSPCI;
@@ -289,17 +279,17 @@
     return $adapters;
 }
 
-
 #----------------------------------------------------------------------
 # Private method. Sort adapters by their driver type.
 #----------------------------------------------------------------------
 
 sub private_card_by_driver ()
 {
+
     # Sort the network cards by their driver type
 
-    $private_pci_network_cards{$a}{driver} cmp
-	$private_pci_network_cards{$b}{driver};
+    $private_pci_network_cards{$a}{driver}
+      cmp $private_pci_network_cards{$b}{driver};
 }
 
 END
@@ -321,3 +311,4 @@
 For more information see http://www.e-smith.org/
 
 =cut
+
