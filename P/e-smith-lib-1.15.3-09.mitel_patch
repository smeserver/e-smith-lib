Index: e-smith-lib/e-smith-lib.spec
diff -u e-smith-lib/root/usr/lib/perl5/site_perl/esmith/NetworksDB.pm:1.11 e-smith-lib/root/usr/lib/perl5/site_perl/esmith/NetworksDB.pm:1.12
--- e-smith-lib/root/usr/lib/perl5/site_perl/esmith/NetworksDB.pm:1.11	Tue Jul 19 13:13:46 2005
+++ e-smith-lib/root/usr/lib/perl5/site_perl/esmith/NetworksDB.pm	Tue Sep 20 10:25:24 2005
@@ -110,7 +110,7 @@
     }
     elsif ( $access eq "private" )
     {
-        foreach my $network ( $self->get_all )
+        foreach my $network ( $self->get_all_by_prop(type => "network"))
         {
             my $mask = $network->prop('Mask');
             push @localAccess, $network->key . "/$mask";
Index: e-smith-lib/root/usr/lib/perl5/site_perl/esmith/util.pm
diff -u e-smith-lib/root/usr/lib/perl5/site_perl/esmith/util.pm:1.65 e-smith-lib/root/usr/lib/perl5/site_perl/esmith/util.pm:1.66
--- e-smith-lib/root/usr/lib/perl5/site_perl/esmith/util.pm:1.65	Fri Sep  9 16:41:04 2005
+++ e-smith-lib/root/usr/lib/perl5/site_perl/esmith/util.pm	Tue Sep 20 10:25:24 2005
@@ -430,120 +430,6 @@
 
 =pod
 
-=head2 computeLocalAccessSpec ($ipaddr, $netmask, %networks [,$access])
-
-Given a network specification (IP address and netmask), and a reference to
-a networks database, compute the network/netmask entries which are to
-treated as local access.
-
-There is also an optional access parameter which can further restrict
-the values returned. If C<access> is C<localhost>, this routine will only
-return a single value, equating to access from localhost only.
-
-DEPRECATED: Please use esmith::NetworksDB::local_access_spec instead.
-
-=cut
-
-sub computeLocalAccessSpec ($$%;$)
-{
-    my ( $ipaddr, $netmask, $networksRef, $access ) = @_;
-
-    $access = "private" unless ( defined $access );
-
-    my ( $network, $broadcast ) =
-      esmith::util::computeNetworkAndBroadcast( $ipaddr, $netmask );
-
-    my @localAccess = ("127.0.0.1");
-
-    if ( $access eq "localhost" )
-    {
-
-        # Nothing more to do
-    }
-    elsif ( $access eq "private" )
-    {
-        my $localnet = "$network/$netmask";
-        push @localAccess, $localnet;
-
-        my @networks = grep { db_get_type( $networksRef, $_ ) eq 'network' }
-          keys %$networksRef;
-
-        foreach my $network (@networks)
-        {
-            my $mask = db_get_prop( $networksRef, $network, 'Mask' );
-
-            $network = esmith::util::computeLocalNetworkSpec( $network, $mask );
-
-            # Don't duplicate the local network
-            next if $network eq $localnet;
-            push @localAccess, $network;
-        }
-    }
-    elsif ( $access eq "public" )
-    {
-        @localAccess = ("ALL");
-    }
-    else
-    {
-        warn "computeLocalAccessSpec: unknown access value $access\n";
-    }
-
-    return wantarray ? @localAccess : "@localAccess";
-}
-
-=pod
-
-=head2 computeHostsAllowSpec (
-    NAME=>serviceName,
-    [ DAEMON=>daemonName, ]
-    SERVICES=>\%services,
-    NETWORKS=>\%networks
-    IPADDR=>ipaddress,
-    NETMASK=>netmask,
-    )
-
-Given a service, return the string suitable for /etc/hosts.allow.
-
-DEPRECATED. Please use esmith::ConfigDB::hosts_allow_spec instead.
-=cut
-
-sub computeHostsAllowSpec(%)
-{
-    my %params = @_;
-
-    unless ( defined $params{'DAEMON'} )
-    {
-        $params{'DAEMON'} = $params{'NAME'};
-    }
-
-    my $status = db_get_prop( $params{'SERVICES'}, $params{'NAME'}, "status" );
-
-    unless ( defined $status )
-    {
-        return "# $params{'NAME'} is not defined in the configuration database";
-    }
-
-    unless ( $status eq "enabled" )
-    {
-        return "# $params{'NAME'} is disabled in the configuration database";
-    }
-
-    my $access = db_get_prop( $params{'SERVICES'}, $params{'NAME'}, "access" )
-      || "private";
-
-    my @spec = (
-        "$params{'DAEMON'}:",
-        esmith::util::computeLocalAccessSpec(
-            $params{'IPADDR'},   $params{'NETMASK'},
-            $params{'NETWORKS'}, $access
-        )
-    );
-
-    return wantarray ? @spec : "@spec";
-}
-
-=pod
-
 =head2 computeHostRange($ipaddr, $netmask)
 
 Given a network specification (IP address and netmask), compute
