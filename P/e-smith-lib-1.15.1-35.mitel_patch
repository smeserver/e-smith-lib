Index: e-smith-lib/e-smith-lib.spec
diff -u e-smith-lib/root/usr/lib/perl5/site_perl/esmith/templates.pm:1.53 e-smith-lib/root/usr/lib/perl5/site_perl/esmith/templates.pm:1.54
--- e-smith-lib/root/usr/lib/perl5/site_perl/esmith/templates.pm:1.53	Tue Feb 22 16:58:03 2005
+++ e-smith-lib/root/usr/lib/perl5/site_perl/esmith/templates.pm	Fri Mar 18 18:52:11 2005
@@ -369,9 +369,9 @@
     }
 
     # Check for illegal combinations of variables.
-    if ( exists $params_hash{CONFREF} ) {
-        croak "ERROR: Can't use CONFREF with MORE_DATA in processTemplate\n"
-          if exists $params_hash{MORE_DATA};
+    if ( exists $params_hash{CONFREF} && exists $params_hash{MORE_DATA}) {
+        carp "ERROR: Can't use CONFREF with MORE_DATA in processTemplate\n";
+	return;
     }
 
     ### merge incoming parameters with the defaults
@@ -387,7 +387,8 @@
     }
 
     unless ( exists $p{'TEMPLATE_PATH'} ) {
-        croak "ERROR: TEMPLATE_PATH parameter missing in processTemplate\n";
+        carp "ERROR: TEMPLATE_PATH parameter missing in processTemplate\n";
+	return;
     }
 
     my $template_path = $p{'TEMPLATE_PATH'};
@@ -396,8 +397,9 @@
 
     # sanity check on OUTPUT_TYPE
     unless ( grep( $p{'OUTPUT_TYPE'}, @valid_output_types ) ) {
-        croak
+        carp
           "ERROR: Invalid OUTPUT_TYPE parameter passed to processTemplate\n";
+	return;
     }
 
     # If OUTPUT_TYPE=file and FILTER is off, then $fh is the output filehandle.
@@ -415,21 +417,29 @@
         ##########################################################
 
         if ( -d "$outputfile" ) {
-            croak "ERROR: Could not expand $outputfile template "
+            carp "ERROR: Could not expand $outputfile template "
               . "- it is a directory\n";
+	    return;
         }
 
         # use POSIX::open to set permissions on create
         require POSIX;
         my $fd =
           POSIX::open( $tempfile,
-            &POSIX::O_CREAT | &POSIX::O_WRONLY | &POSIX::O_TRUNC, 0600)
-          || croak "ERROR: Cannot create output file " . "$tempfile $!\n";
+            &POSIX::O_CREAT | &POSIX::O_WRONLY | &POSIX::O_TRUNC, 0600);
+        unless ($fd)
+	{
+	    carp "ERROR: Cannot create output file " . "$tempfile $!\n";
+	    return;
+	}
 
         # create a filehandle reference to the newly opened file
         $fh = new FileHandle;
-        $fh->fdopen( $fd, "w" )
-          || croak "ERROR: Cannot open output file " . "$tempfile: $!\n";
+        unless ($fh->fdopen( $fd, "w" ))
+	{
+	    carp "ERROR: Cannot open output file " . "$tempfile: $!\n";
+	    return;
+	}
 
         if ( defined $p{FILTER} ) {
 
@@ -456,7 +466,8 @@
     # if template hash is empty produce an error
     unless ( keys %template_hash ) {
         unlink $tempfile;
-        croak "ERROR: No templates were found for $template_path.\n";
+        carp "ERROR: No templates were found for $template_path.\n";
+	return;
     }
 
     #####################################################
@@ -517,23 +528,31 @@
 
             # process the templates
             if ( $p{'OUTPUT_TYPE'} eq 'file' ) {
-                fill_in_file(
+                unless (fill_in_file(
                     "$filepath",
                     HASH    => $tmpl_vars,
                     PACKAGE => $pkg,
                     BROKEN  => $broken,
                     OUTPUT  => \*$fh
-                  )
-                  || croak "ERROR: Cannot process template $filepath: $!\n";
+                  ))
+		{
+		    carp "ERROR: Cannot process template $filepath: $!\n";
+		    return;
+		}
             }
             elsif ( $p{'OUTPUT_TYPE'} eq 'string' ) {
-                $text .= fill_in_file(
+		my $ltext;
+                unless ($ltext = fill_in_file(
                     "$filepath",
                     HASH    => $tmpl_vars,
                     BROKEN  => $broken,
                     PACKAGE => $pkg
-                  )
-                  || croak "ERROR: Cannot process template $filepath: $!\n";
+                  ))
+		{
+		    carp "ERROR: Cannot process template $filepath: $!\n";
+		    return;
+		}
+                $text .= $ltext;
             }
         }
     }
@@ -558,7 +577,8 @@
         $msg .= " $errorCount fragment";
         $msg .= "s" if $errorCount != 1;
         $msg .= " generated errors";
-        croak "ERROR: $msg\n";
+        carp "ERROR: $msg\n";
+	return;
     }
     elsif ($warningCount) {
         my $msg = "Template processing succeeded for $outputfile:";
@@ -627,16 +647,16 @@
 
 	# now do chown on our new target
 	chown( $uid, $gid, $tempfile )
-	  || croak "ERROR:  Can't chown file $tempfile: $!\n";
+	  || carp "ERROR:  Can't chown file $tempfile: $!\n";
 
 	# Now do chmod as well - POSIX::open does not change permissions
 	# of a preexisting file
 	chmod( $perms, $tempfile )
-	  || croak "ERROR: Can't chmod file $tempfile: $!\n";
+	  || carp "ERROR: Can't chmod file $tempfile: $!\n";
 	
         unless ( -f $outputfile ) {
             rename( "$tempfile", "$outputfile" )
-              or croak(
+              or carp(
                 "ERROR: Could not rename $tempfile " . "to $outputfile: $!\n" );
             return;
         }
@@ -658,9 +678,9 @@
 
 	    # now do chown and chmod the file, to ensure permissions are correct
 	    chown( $uid, $gid, $outputfile )
-	      || croak "ERROR:  Can't chown file $tempfile: $!\n";
+	      || carp "ERROR:  Can't chown file $tempfile: $!\n";
 	    chmod( $perms, $outputfile )
-	      || croak "ERROR: Can't chmod file $tempfile: $!\n";
+	      || carp "ERROR: Can't chmod file $tempfile: $!\n";
         }
         else {
             $debug_template_expansion
@@ -668,7 +688,7 @@
                 "Updating $outputfile - MD5 was $oldMD5sum, now $newMD5sum\n");
 
             rename( "$tempfile", "$outputfile" )
-              or croak(
+              or carp(
                 "ERROR: Could not rename $tempfile " . "to $outputfile: $!\n" );
         }
 
